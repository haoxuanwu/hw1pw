!T
gauss_seidel = function(A, b, v, iteration=10000){
x = matrix(0, nrow=length(b))
rel_err = c()
time = c()
timer0 = proc.time()[3]
for (iter in 1:iteration) {
for (i in 1:length(b)){
temp = 0
for (j in 1:length(b)){
if (j != i) {
temp = temp + A[i, j]*x[j]
}
}
x[i] = 1/A[i,i]*(b[i]-temp)
}
if (!is.na(v))
rel_err[iter] = norm(x-v, type="2")/norm(v, type="2")
time[iter] = round(proc.time()[3] - timer0, digits=3)
}
list(x = x, rel_err = rel_err, time = time)
}
gauss_seidel(1, 0, NA)
rm(gauss_seidel)
b = A %*% v
source('~/Documents/Grad Study/STSCI 6520/Homework 2/hw1pw/R/hello.R', echo=TRUE)
library(hw1pw)
library(hw1pw)
devtools::document()
#Problem 1 Part 1
#Alpha = 1
A = matrix(0, nrow = 100, ncol=100)
diag(A) = rep(1, 100)
index = seq(1, 99)
A[cbind(index+1, index)] = rep(-1, 99)
A[cbind(index, index+1)] = rep(-1, 99)
spec_norm = max(sqrt(eigen(t(A)%*%A)$values))
#Check spectral radius for Jacobi
D = diag(rep(1, 100))
R = A - D
max(eigen(D%*%R)$values)
#Spectral radius for Gauss-Seidel
L = matrix(0, nrow = 100, ncol=100)
L[cbind(index+1, index)] = rep(-1, 99)
U = matrix(0, nrow = 100, ncol=100)
U[cbind(index, index+1)] = rep(-1, 99)
gauss_seidel = function(A, b, v, iteration=10000){
x = matrix(0, nrow=length(b))
rel_err = c()
time = c()
timer0 = proc.time()[3]
for (iter in 1:iteration) {
for (i in 1:length(b)){
temp = 0
for (j in 1:length(b)){
if (j != i) {
temp = temp + A[i, j]*x[j]
}
}
x[i] = 1/A[i,i]*(b[i]-temp)
}
rel_err[iter] = norm(x-v, type="2")/norm(v, type="2")
time[iter] = round(proc.time()[3] - timer0, digits=3)
}
list(x = x, rel_err = rel_err, time = time)
}
jacobi = function(A, b, v, iteration=10000){
x = matrix(0, nrow=length(b))
rel_err = c()
time = c()
timer0 = proc.time()[3]
for (iter in 1:iteration) {
temp_x = x
for (i in 1:length(b)){
temp = 0
for (j in 1:length(b)){
if (j != i) {
temp = temp + A[i, j]*temp_x[j]
}
}
x[i] = 1/A[i,i]*(b[i]-temp)
}
rel_err[iter] = norm(x-v, type="2")/norm(v, type="2")
time[iter] = round(proc.time()[3] - timer0, digits=3)
}
list(x = x, rel_err = rel_err, time = time)
}
jacobi_par = function(A, b, v, iteration=10000){
x = matrix(0, nrow=length(b))
rel_err = c()
time = c()
timer0 = proc.time()[3]
for (iter in 1:iteration) {
print(iter)
temp_x = x
x = foreach(i = 1:length(b), .combine=c) %dopar% {
temp = 0
for (j in 1:length(b)){
if (j != i) {
temp = temp + A[i, j]*temp_x[j]
}
}
1/A[i,i]*(b[i]-temp)
}
rel_err[iter] = norm(x-v, type="2")/norm(v, type="2")
time[iter] = round(proc.time()[3] - timer0, digits=3)
}
list(x = x, rel_err = rel_err, time = time)
}
#Alpha = 2
diag(A) = rep(2, 100)
spec_norm = max(sqrt(eigen(t(A)%*%A)$values))
#Check spectral radius for Jacobi
D = diag(rep(2, 100))
R = A - D
max(abs(eigen(diag(rep(1/2, 100))%*%R)$values))
#Spectral radius for Gauss-Seidel
max(abs(eigen(solve(L+D)%*%U)$values))
#Alpha = 1
diag(A) = rep(1, 100)
v = matrix(rep(1,100), nrow=100)
b = A %*% v
g_res_1 = gauss_seidel(A, b, v)
library(MASS)
library(MASS)
g_res_1 = gauss_seidel(A, b, v)
library(leaps)
g_res_1 = gauss_seidel(A, b, v)
library(glmnet)
g_res_1 = gauss_seidel(A, b, v)
x
A
View(A)
#Alpha = 2
diag(A) = rep(2, 100)
spec_norm = max(sqrt(eigen(t(A)%*%A)$values))
#Check spectral radius for Jacobi
D = diag(rep(2, 100))
R = A - D
max(abs(eigen(diag(rep(1/2, 100))%*%R)$values))
#Spectral radius for Gauss-Seidel
max(abs(eigen(solve(L+D)%*%U)$values))
v = matrix(rep(1,100), nrow=100)
b = A %*% v
g_res_1 = gauss_seidel(A, b, v)
g_res_1 = gauss_seidel(A, b, v)
gauss_seidel = function(A, b, v, iteration=10000){
x = matrix(0, nrow=length(b))
rel_err = c()
time = c()
timer0 = proc.time()[3]
for (iter in 1:iteration) {
for (i in 1:length(b)){
temp = 0
for (j in 1:length(b)){
if (j != i) {
temp = temp + A[i, j]*x[j]
}
}
x[i] = 1/A[i,i]*(b[i]-temp)
}
rel_err[iter] = norm(x-v, type="2")/norm(v, type="2")
time[iter] = round(proc.time()[3] - timer0, digits=3)
}
list(x = x, rel_err = rel_err, time = time)
}
devtools::document()
X = matrix(rt(500, 6), nrow=500)
ep = matrix(rnorm(500, 0, 1), nrow=500)
y = -X + ep
unif_subs(y, X, r)
unif_subs = function(y, X, r, plot=F) {
prob = rep(1/(length(y)), length(y))
samp = sample(seq(1, length(y)), r, prob = prob)
data = data.frame(y = y[samp], X = X[samp])
model = lm(y ~ X, data = data, weights = 1/prob[samp])
if (plot) {
plot(X, y, main="Uniform")
points(X[samp], y[samp], col = "red", lwd=3)
abline(a = model$coefficients[1], b = model$coefficients[2], col="red")
}
model$coefficients[2]
}
unif_subs(y, X, r)
r = 100
unif_subs(y, X, r)
devtools::document()
devtools::document()
n = 100
alpha = 1
eps = matrix(rnorm(n, 0, 1), nrow=n)
sig = diag(rep(1, 20))
sig[1, 2] = 0.8; sig[2,1]= 0.8; sig[5,6] = 0.8; sig[6,5]=0.8
X = mvrnorm(n, mu=rep(0, 20), Sigma = sig)
X = scale(X)
beta = matrix(c(2,0,-2,0,1,0,-1,0,rep(0, 12)), nrow=20)
y = X%*%beta+eps
max_val = c()
for (ind in 1:length(X[1,])){
max_val[ind] = 1/length(y)*sum(abs(X[,ind]*y))
}
if (alpha==0){
alpha_temp=0.01
} else{
alpha_temp = alpha
}
lambda_max = max(max_val)/alpha_temp
lambda_min = 0.001*lambda_max
lambda_min
lambda_max
devtools::document()
library(hw1pw)
A = matrix(0, nrow = 100, ncol=100)
diag(A) = rep(3, 100)
index = seq(1, 99)
A[cbind(index+1, index)] = rep(-1, 99)
A[cbind(index, index+1)] = rep(-1, 99)
v = matrix(rep(1,100), nrow=100)
b = A %*% v
solve_ols(A, b, v, method="gauss_seidel")
warnings()
v
null
NULL
library(hw1pw)
solve_ols(A, b, v, method="gauss_seidel")
solve_ols(A, b, v, method="jacobi")
X = matrix(rt(500, 6), nrow=500)
ep = matrix(rnorm(500, 0, 1), nrow=500)
y = -X + ep
r= 100
algo_leverage(y, X, r, method="unif", plot=T)
algo_leverage(y, X, r, method="lev", plot=T)
n = 100
alpha = 1
eps = matrix(rnorm(n, 0, 1), nrow=n)
X = mvrnorm(n, mu=rep(0, 20), Sigma = diag(rep(1, 20)))
library(MASS)
X = mvrnorm(n, mu=rep(0, 20), Sigma = diag(rep(1, 20)))
X = scale(X)
beta = matrix(c(2,0,-2,0,1,0,-1,0,rep(0, 12)), nrow=20)
y = X%*%beta+eps
elnet_coord(X, y, alpha, 0.05)
devtools::document()
library(hw1pw)
A = matrix(0, nrow = 100, ncol=100)
diag(A) = rep(3, 100)
index = seq(1, 99)
A[cbind(index+1, index)] = rep(-1, 99)
A[cbind(index, index+1)] = rep(-1, 99)
v = matrix(rep(1,100), nrow=100)
b = A %*% v
#' solve_ols(A, b, v, method="gauss_seidel")
#' solve_ols(A, b, v, method="jacobi")
solve_ols(A, b, v, method="jacobi", no_core=2)
library(doParallel)
solve_ols(A, b, v, method="jacobi", no_core=2)
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("haoxuanwu/hw1pw")
library(hw1pw)
A = matrix(0, nrow = 100, ncol=100)
diag(A) = rep(3, 100)
index = seq(1, 99)
A[cbind(index+1, index)] = rep(-1, 99)
A[cbind(index, index+1)] = rep(-1, 99)
v = matrix(rep(1,100), nrow=100)
b = A %*% v
gs_output = solve_ols(A, b, v, method="gauss_seidel")
j_output = solve_ols(A, b, v, method="jacobi")
plot(gs_output$rel_err)
X = matrix(rt(500, 6), nrow=500)
ep = matrix(rnorm(500, 0, 1), nrow=500)
y = -X + ep
r = 100
algo_leverage(y, X, r, method="unif")
algo_leverage(y, X, r, method="lev")
n = 100
alpha = 1
eps = matrix(rnorm(n, 0, 1), nrow=n)
X = mvrnorm(n, mu=rep(0, 20), Sigma = diag(rep(1, 20)))
library(MASS)
n = 100
alpha = 1
eps = matrix(rnorm(n, 0, 1), nrow=n)
X = mvrnorm(n, mu=rep(0, 20), Sigma = diag(rep(1, 20)))
X = scale(X)
beta = matrix(c(2,0,-2,0,1,0,-1,0,rep(0, 12)), nrow=20)
y = X%*%beta+eps
elnet_coord(X, y, alpha, 0.05)
